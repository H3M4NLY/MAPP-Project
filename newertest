#include <cstdio>
#include <cctype>
#include <cstdlib>
#undef __ARM_FP

#include "mbed.h"
#include "lcd.h"	
#include "keypad.h"	

#define DISPLAY_BAR_MASK 0x000000FF 	//PORT C0: PC_7 - PC_0
#define DISPLAY_BAR_RESET 0x00000000


AnalogIn moistureSensor(PA_0);
DigitalOut waterPump(PA_5);
PwmOut Motor1(PA_6);
PwmOut Motor2(PA_7);
PwmOut buzzer(PA_9);
//Declare the GPIO pins for the Switch as DigitalIn type

BusOut led(PB_0);  
BusOut led2(PB_1);
BusOut led3(PB_2);
BusOut led4(PB_4);

PortOut displayBarPort(PortC, DISPLAY_BAR_MASK);

char bruh;
char lmao = 0;
char settime = 0;
char check = 0;

unsigned char key, outChar;
unsigned char status = '0';
unsigned char pumpfreq[10];

char moistureStr[10];
char Message1 [ ] = "Select Option:      ";
char Message2 [ ] = "Mode 1              ";	  
char Message3 [ ] = "Mode 2              ";	  
char Message4 [ ] = "Invalid. Loser.     ";  
char Message5 [] =  "Moisture: ";
char TimeMessage1 [] = "Frequency Mode: ";



Ticker pumpTicker;
Ticker moistureTicker;
Ticker readMoistureTicker;
Ticker bruhTicker;
Ticker tickerticker;
Ticker Servo;

Timer timer;
Timer pumpSub;


int pump_frequency = 0;
int clear = 0;

int moisturePercentage; // Global variable to store the moisture percentage

// Function to simulate reading the moisture sensor
void read_moisture_sensor() {
    float moistureValue = moistureSensor.read();
    float moisturePercentage = moistureValue * 100.0;
    printf("Moisture percentage: %.2f\n", moisturePercentage);
    sprintf(moistureStr, "%.2f", moisturePercentage);
    strcat(Message5, moistureStr);
    snprintf(Message5, sizeof(Message5), "Moisture: %.2f", moisturePercentage);
    
}

void control_water_pump(bool turn_on) {
    waterPump = turn_on ? 1 : 0; // Turn the pump on or off
    printf("Pump should work. \n");
}

void toggle_water_pump() {
    static bool pump_state = false;
    pump_state = !pump_state;
    control_water_pump(pump_state);
    printf("idk \n");
}

void stop_servo1() {
    Motor1.period(0.02f);
    Motor1.write(0.0f);   // 0% duty cycle (Suspending servo movement)
    printf("Servo 1 stopped\n");
}

// Function to set the first servo motor forward
void set_servo1_forward() {
    stop_servo1();
    Motor1.period(0.02f);   // 20ms period (standard for servos)
    Motor1.write(0.10f);    // 10% duty cycle (forward position)
    printf("Servo 1 set to forward position\n");
    stop_servo1();
}

// Function to set the first servo motor backward
void set_servo1_backward() {
    stop_servo1();
    Motor1.period(0.02f);   // 20ms period (standard for servos)
    Motor1.write(0.05f);    // 5% duty cycle (backward position)
    printf("Servo 1 set to backward position\n");
    stop_servo1();
}

void stop_servo2() {
    Motor2.period(0.02f);
    Motor2.write(0.0f);   // 0% duty cycle (Suspending servo movement)
    printf("Servo 2 stopped\n");
}


// Function to set the second servo motor forward
void set_servo2_forward() {
    stop_servo2();
    Motor2.period(0.02f);   // 20ms period (standard for servos)
    Motor2.write(0.10f);    // 10% duty cycle (forward position)
    printf("Servo 2 set to forward position\n");
    stop_servo2();
}

// Function to set the second servo motor backward
void set_servo2_backward() {
    stop_servo2();
    Motor2.period(0.02f);   // 20ms period (standard for servos)
    Motor2.write(0.05f);    // 5% duty cycle (backward position)
    stop_servo2();
    printf("Servo 2 set to backward position\n");

}




void check_moisture(){
    if (moisturePercentage >= 50 && lmao == 0){
                led = 0;
                led2 = 1;
                 while(timer.read()<= 2){
                    set_servo1_forward();
                 }
                timer.stop();
                if (timer.read()>2){
                    stop_servo1();
                }
                timer.reset();
                lmao = 1;
             }
    else if (moisturePercentage < 50 && lmao == 1)
            {
                led = 0;
                led2 = 1;
                while(timer.read()<= 2){
                    set_servo1_backward();
                }
                timer.stop();
                if (timer.read()>2){
                    stop_servo1();
                }
                timer.reset();
                lmao = 0;
            }
}


void sub(){
    printf("what\n");
    pumpSub.start();
    while (pumpSub <= 0.5){
        set_servo2_forward();
        stop_servo2();
    }
    if(pumpSub > 0.5){
        pumpSub.stop();
        stop_servo2();
    }
    pumpSub.reset();

}

void pumpcheck(){
    printf("Checking integer : %d \n", pump_frequency);
    if (pump_frequency == 0){
        pumpTicker.detach();
    }

    else if (check == 0){
        pumpTicker.attach(&sub, pump_frequency);
        printf("help\n");
        check = 1;
    }

}

bool isValidInteger(const unsigned char* pumpfreq, int length) {
    for (int i = 0; i < length; i++) {
        if (!isdigit(pumpfreq[i])) {
            return false;
        }
    }
    return true;
}

void displaySelectOption() {
    lcd_write_cmd(0x01); // Clear the LCD
    lcd_write_cmd(0x80); // Move cursor to line 1 position 1
    for (int i = 0; i < 20; i++) //for 20 char LCD module
    {
        outChar = Message1[i];
        lcd_write_data(outChar); // write character data to LCD
    }  
}

// ---- Main Program ---------------------------------------------------------------
int main( )
{
    

	int i;
	lcd_init();	 // Initialise LCD module
    printf("hello \n");
    led2 = 1;
    led4 = 1;

    moistureTicker.attach(&read_moisture_sensor, 5000ms);
    readMoistureTicker.attach(&check_moisture, 5000ms);
    tickerticker.attach(&pumpcheck, 2500ms);

    char status;
    lcd_write_cmd(0x80); // Move cursor to line 1 position 1
    for (i = 0; i < 20; i++) //for 20 char LCD module
    {
        outChar = Message1[i];
        lcd_write_data(outChar); // write character data to LCD
    }  

    while(true)
        {
            status = getkey();
            //display the PIN keyed in on LCD
            //lcd_write_data(status);
            //lcd_write_cmd(0x01);
            //lcd_write_cmd(0xC0); // Move cursor to line 2 position 1

            // Add a delay to avoid flooding the console with messages
            thread_sleep_for(50);


            if (status == '1')
            {
                if (clear == 1){
                    lcd_write_cmd(0x01);
                }
                bruh = 1;
                settime = 1;
                while (settime == 1) {
                    lcd_write_cmd(0x80); // Move cursor to line 1 position 1
                    for (i = 0; i < 16; i++) {
                        outChar = TimeMessage1[i];
                        lcd_write_data(outChar);
                        thread_sleep_for(50);
                    }
                    lcd_write_cmd(0xC0);

                    // Clear pumpfreq array
                    memset(pumpfreq, 0, sizeof(pumpfreq));
                    int freqIndex = 0;
                    bool validInput = true;

                    // Get user input
                    for (int i = 0; i < 10; i++) {
                        char key = getkey();
                        if (key == 'C') {
                            if (freqIndex == 0) {
                                validInput = false;
                                break;  // 'C' pressed before any digit was entered
                            }
                            break;  // Exit loop on 'C' (Enter key)
                        }
                        if (key >= '0' && key <= '9') {
                            pumpfreq[freqIndex++] = key;
                            lcd_write_data(key);
                        } else {
                            validInput = false;
                            break;  // Invalid input
                        }
                    }

                    if (validInput && freqIndex > 0) {
                        pumpfreq[freqIndex] = '\0';  // Null-terminate the string
                        pump_frequency = 0;
                        // Convert the valid input into an integer manually
                        for (int i = 0; i < freqIndex; i++) {
                            pump_frequency = pump_frequency * 10 + (pumpfreq[i] - '0');
                        }

                        // Display the entered frequency for confirmation
                        lcd_write_cmd(0xC0); // Move cursor to line 2 position 1
                        char confirmationMessage[20];
                        sprintf(confirmationMessage, "Frequency: %d", pump_frequency);
                        for (int i = 0; i < strlen(confirmationMessage); i++) {
                            lcd_write_data(confirmationMessage[i]);
                        }

                        thread_sleep_for(2500);
                        check = 0;
                        settime = 0;
                        displaySelectOption();
                 
                        
                    }               
                
                    else {
                        // Display error message
                        lcd_write_cmd(0xC0); // Move cursor to line 2 position 1
                        char errorMessage[] = "Invalid input!";
                        for (int i = 0; i < strlen(errorMessage); i++) {
                            lcd_write_data(errorMessage[i]);
                        }
                        thread_sleep_for(2000);  // Delay to show the error message
                        lcd_write_cmd(0x01);     // Clear LCD
                    }
                 }
            }
            else if (status == '2')
            {
                if (clear == 1){
                    displaySelectOption();
                    clear = 0;
                }
                lcd_write_cmd(0xC0);
                char stuff[20];
                float moistureValue = moistureSensor.read();
                float moisturePercentage = moistureValue * 100.0;
                sprintf(stuff, "Moisture: %.2f", moisturePercentage);
                for (int i = 0; i < strlen(stuff); i++) {
                    lcd_write_data(stuff[i]);
                }
                clear = 1;
            }


            else 
            {
                if (clear == 1){
                    displaySelectOption();
                    clear = 0;
                }
                lcd_write_cmd(0xC0);
                for (i = 0; i < 20; i++)		//for 20 number
                { 
                    outChar = Message4[i];
                    lcd_write_data(outChar);
                    thread_sleep_for(50);
                }  
                bruh = 3;
                clear = 1;
                thread_sleep_for(1000);
                displaySelectOption();

                timer.start();
                while(timer.read() <= 2){
                    set_servo1_forward();
                    stop_servo2();
                    led = 1;
                    led2 = 0;
                    led3 = 1;
                    led4 = 0;
                }
                timer.stop();
                    if (timer.read() >= 2){
                        stop_servo1();

                }
                timer.stop();
                timer.reset(); 
                timer.start();  
                while(timer.read()<= 2){
                    stop_servo1();
                    set_servo1_backward();
                    led = 0;
                    led2 = 1;
                    led3 = 0;
                    led4 = 1;
                }
                timer.stop();
                if (timer.read() >=2){
                    stop_servo1();

                }
                timer.reset();    
            
            }
        }
}
